const nodemailer = require('nodemailer');
const Chats = require('../models/Chat');
const ChatMembers = require('../models/ChatMember');
const messages = require('../models/Messages');
const Users = require('../models/User');
const Contacts = require("../models/Contacts");
const Controller = {};
Controller.sendOtpEmail = async (recipientEmail, otp) => {
  // T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng transporter ƒë·ªÉ c·∫•u h√¨nh ph∆∞∆°ng th·ª©c g·ª≠i email:
  //   service: 'gmail': d√πng Gmail ƒë·ªÉ g·ª≠i.
  //     auth: th√¥ng tin ƒëƒÉng nh·∫≠p Gmail.
  //     user: ƒë·ªãa ch·ªâ Gmail c·ªßa b·∫°n.
  //     pass: App Password, kh√¥ng ph·∫£i m·∫≠t kh·∫©u Gmail th√¥ng th∆∞·ªùng (ph·∫£i b·∫≠t x√°c th·ª±c 2 b∆∞·ªõc tr√™n t√†i kho·∫£n Google ƒë·ªÉ d√πng ƒë∆∞·ª£c c√°i n√†y).
//   App Password (M·∫≠t kh·∫©u ·ª©ng d·ª•ng) l√† m·ªôt m·∫≠t kh·∫©u ƒë·∫∑c bi·ªát m√† Google cung c·∫•p cho b·∫°n ƒë·ªÉ ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n Gmail t·ª´ ·ª©ng d·ª•ng b√™n th·ª© ba nh∆∞:
//     Nodemailer
//     Outlook·ª®ng d·ª•ng di ƒë·ªông kh√¥ng h·ªó tr·ª£ x√°c th·ª±c 2 b∆∞·ªõc (2FA)
// üî• N√≥ kh√°c v·ªõi m·∫≠t kh·∫©u Gmail th√¥ng th∆∞·ªùng. ƒê√¢y l√† m·ªôt m√£ g·ªìm 16 k√Ω t·ª±, do Google t·∫°o ra.
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });
  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: recipientEmail,
    subject: 'M√£ x√°c th·ª±c OTP c·ªßa b·∫°n',
    text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}`,
  };
  try {
    await transporter.sendMail(mailOptions);
    console.log('G·ª≠i OTP th√†nh c√¥ng');
  } catch (error) {
    console.error('G·ª≠i OTP th·∫•t b·∫°i:', error);
  }
};
Controller.getChatsForUser = async (userID) => {
  try {
    // 1. L·∫•y danh s√°ch chatID t·ª´ chat_members
    const memberDocs = await ChatMembers.find({ userID }).lean();
    const chatIDs = memberDocs.map(m => m.chatID);
    // 2. L·∫•y th√¥ng tin chat t∆∞∆°ng ·ª©ng
    const chats = await Chats.find({ chatID: { $in: chatIDs } }).lean();
    // 3. G·∫Øn th√™m tin nh·∫Øn cu·ªëi c√πng + th√¥ng tin ng∆∞·ªùi g·ª≠i
    for (let chat of chats) {
      const lastMsg = await messages.find({ chatID: chat.chatID })
        .sort({ timestamp: -1 })
        .lean();
      // L·∫•y to√†n b·ªô senderID trong m·∫£ng lastMsg
      const senderIDs = lastMsg.map(msg => msg.senderID);
      const senders = await Users.find({ userID: { $in: senderIDs } }).lean();
      // Map t·ª´ng msg v·ªõi sender
      const enrichedMessages = lastMsg.map(msg => {
        const sender = senders.find(u => u.userID === msg.senderID);
        return {
          ...msg,
          senderInfo: sender ? {
            name: sender.name,
            avatar: sender.anhDaiDien || null,
          } : null,
        };
      });

      chat.lastMessage = enrichedMessages;
    }

    console.log("Danh s√°ch chat sau khi g√°n user cho tin nh·∫Øn cu·ªëi:", chats);
    return chats;
  } catch (error) {
    console.error("L·ªói khi l·∫•y chat:", error);
    throw error;
  }
};
Controller.getCreatMessageByChatID = async (newMsg)=>{
  try {
    const lastMessage  = await messages.findOne().sort({ messageID: -1 }).limit(1);
    if (!lastMessage) {
      return 'msg001';
    }
  const lastMessageID = lastMessage.messageID;
  const lastNumber = parseInt(lastMessageID.replace('msg', ''), 10);  // T√°ch ph·∫ßn s·ªë t·ª´ userID
  const newNumber = lastNumber + 1;  // TƒÉng s·ªë l√™n 1

  // ƒê·∫£m b·∫£o r·∫±ng userID c√≥ 3 ch·ªØ s·ªë
  const messageID = `msg${newNumber.toString().padStart(3, '0')}`;
    const newMessage = new messages({
      messageID: messageID,
      chatID: newMsg.chatID,
      senderID: newMsg.senderID,
      content: newMsg.content,
      type: newMsg.type,
      timestamp: newMsg.timestamp,
      media_url:newMsg.media_url,
      status: newMsg.status,
    });
   const saveMsg= await newMessage.save();
   return saveMsg;
  } catch (error) {
    console.error("L·ªói khi l·∫•y chat:", error);
    throw error;
  }
};
Controller.getChatMembersByChatID = async (chatID) => {
  try {
    const chatmembers = await ChatMembers.findOne({chatID: chatID });
    if (!chatmembers) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán!" });
    }
    return chatmembers;
} catch (error) {
    res.status(500).json({ error: error.message });
}
};
Controller.getContacts = async (userID) => {
  try {
    // Find all pending friend requests where the user is the receiver
    const pendingRequests = await Contacts.find({
      userID: userID,  // The user is the receiver
      status: 'pending'   // Only look for pending requests
    }).exec();

    // If there are no pending requests
    if (pendingRequests.length === 0) {
      return null
    }

    // Fetch user details for each contactID (sender of the request)
    const friendDetails = [];

    // Loop through each pending request
    for (let request of pendingRequests) {
      const contactID = request.userID; // The contactID is the sender of the request

      // Fetch user details for the contact (sender)
      const contactUser = await Users.findOne({ userID: contactID }).select('name anhDaiDien sdt').exec();

      if (contactUser) {
        friendDetails.push({
          contactID,
          name: contactUser.name,
          avatar: contactUser.anhDaiDien,
          phoneNumber: contactUser.sdt,
          alias: request.alias // The alias from the Contact collection
        });
      }
    }

    // Return the list of pending requests with user details
   return friendDetails;
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch y√™u c·∫ßu k·∫øt b·∫°n:', error);
    return null; // Ho·∫∑c x·ª≠ l√Ω l·ªói theo c√°ch kh√°c
  }
};



module.exports = Controller;