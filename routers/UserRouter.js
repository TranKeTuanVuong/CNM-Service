const express = require("express");
const Users = require("../models/User");
const router = express.Router();
const mongoose = require("mongoose");
const bcrypt = require("bcrypt");
// API l·∫•y danh s√°ch user
router.get("/users", async (req, res) => {
  try {
    const users = await Users.find();
    res.json(users);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API l·∫•y chi ti·∫øt user theo userID
// router.get("/users/:userID", async (req, res) => {
//   try {
//     const user = await Users.findOne({ userID: req.params.userID });
//     if (!user) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });
//     res.json(user);
//   } catch (error) {
//     res.status(500).json({ error: error.message });
//   }
// });
router.post ("/login", async (req, res) => {
  const { sdt, matKhau } = req.body;
  console.log("üìå ƒêƒÉng nh·∫≠p v·ªõi s·ªë:", sdt); // Log s·ªë ƒëi·ªán tho·∫°i

  try {
      const user = await Users.findOne({ sdt});
      if (!user) {
          console.log("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!");
          return res.status(400).json({ message: "Sai s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u!" });
      }

      console.log("üîê Ki·ªÉm tra m·∫≠t kh·∫©u...");
      console.log("M·∫≠t kh·∫©u:", matKhau);
      console.log("M·∫≠t kh·∫©u trong db:", user.matKhau);
      const isMatch = await bcrypt.compare(matKhau, user.matKhau);
      console.log("‚úÖ K·∫øt qu·∫£ ki·ªÉm tra m·∫≠t kh·∫©u:", isMatch);

      if (!isMatch) {
          console.log("‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
          return res.status(400).json({ message: "Sai s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u!" });
      }

    //  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "7d" });
     // console.log("üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");

      res.status(200).json({
          message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
          
          user: {
              _id: user._id,
              name: user.name,
              sdt: user.sdt,
              trangThai: user.trangThai,
          },
      });
  } catch (error) {
      console.log("üî• L·ªói server:", error);
      res.status(500).json({ message: error.message });
  }
});

router.post("/registerUser",async (req, res) => {
  const { sdt, name, ngaySinh, matKhau } = req.body;

  if (!sdt || !name || !ngaySinh || !matKhau) {
      return res.status(400).json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin" });
  }

  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i ch∆∞a
  const userExists = await Users.findOne({ sdt });
  if (userExists) {
      return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω" });
  }

  // M√£ h√≥a m·∫≠t kh·∫©u
  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(matKhau, salt);

  // T·∫°o ng∆∞·ªùi d√πng m·ªõi
  const user = await Users.create({
      sdt,
      name,
      ngaySinh,
      matKhau: hashedPassword, // L∆∞u m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a
  });

  if (user) {
      res.status(201).json({
          message: "ƒêƒÉng k√Ω th√†nh c√¥ng",
          userId: user._id, // Tr·∫£ v·ªÅ ID thay v√¨ hashedPassword
      });
  } else {
      res.status(400).json({ message: "ƒêƒÉng k√Ω th·∫•t b·∫°i" });
  }
});

// API doi mat khau
router.post("/users/doimatkhau", async (req, res) => {
  try {
    console.log("Request body:", req.body); // Debug d·ªØ li·ªáu nh·∫≠n v√†
    console.log("SDT:", req.body.SDT);
    console.log("M·∫≠t kh·∫©u m·ªõi:", req.body.matkhau);
    const updatedUser = await Users.findOneAndUpdate(
      { SDT: req.body.SDT },
      { $set: { matkhau: req.body.matkhau } },
      { new: true, runValidators: true }
    );
    
    if (!updatedUser) {
      return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });
    }else{
      res.json(updatedUser);
    }
  } catch (error) {


// API doi mat khau
router.post("/users/doimatkhau", async (req, res) => {
  try {
    console.log("Request body:", req.body); // Debug d·ªØ li·ªáu nh·∫≠n v√†
    console.log("SDT:", req.body.SDT);
    console.log("M·∫≠t kh·∫©u m·ªõi:", req.body.matkhau);
    const updatedUser = await Users.findOneAndUpdate(
      { SDT: req.body.SDT },
      { $set: { matkhau: req.body.matkhau } },
      { new: true, runValidators: true }
    );
    
    if (!updatedUser) {
      return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });
    }else{
      res.json(updatedUser);
    }
  } catch (error) {
    console.error("L·ªói:", error.message);
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
