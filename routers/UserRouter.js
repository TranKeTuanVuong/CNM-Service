const express = require("express");
const Users = require("../models/User");
const router = express.Router();
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const Controller = require("../controller/index");
const upload = require("../middleware/index");
const uploadToCloudinary = require("../service/index");

// API l·∫•y danh s√°ch user
router.get("/users", async (req, res) => {
  try {
    const users = await Users.find();
    res.json(users);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
router.post("/usersID", async (req, res) => {
  try {
    const { userID } = req.body;
    const user = await Users.find({ userID: userID });
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});


router.post("/login", async (req, res) => {
  const { sdt, matKhau } = req.body;
  console.log("üìå ƒêƒÉng nh·∫≠p v·ªõi s·ªë:", sdt); // Log s·ªë ƒëi·ªán tho·∫°i

  try {
    // T√¨m ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu
    const user = await Users.findOne({ sdt });

    // N·∫øu ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i
    if (!user) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!");
      return res.status(400).json({ message: "Sai s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u!" });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    console.log("üîê Ki·ªÉm tra m·∫≠t kh·∫©u...");
    console.log("M·∫≠t kh·∫©u:", matKhau);
    console.log("M·∫≠t kh·∫©u trong db:", user.matKhau);

    // So s√°nh m·∫≠t kh·∫©u ng∆∞·ªùi d√πng nh·∫≠p v√†o v·ªõi m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a trong c∆° s·ªü d·ªØ li·ªáu
    const isMatch = await bcrypt.compare(matKhau, user.matKhau); // So s√°nh m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a

    console.log("‚úÖ K·∫øt qu·∫£ ki·ªÉm tra m·∫≠t kh·∫©u:", isMatch);

    if (!isMatch) {
      console.log("‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
      return res.status(400).json({ message: "Sai s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u!" });
    }

    // N·∫øu m·∫≠t kh·∫©u ƒë√∫ng, tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng
    res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      user
    });

  } catch (error) {
    console.log("üî• L·ªói server:", error);
    res.status(500).json({ message: error.message });
  }
});


const generateUserID = async () => {
  // T√¨m ng∆∞·ªùi d√πng cu·ªëi c√πng ƒë·ªÉ l·∫•y ID l·ªõn nh·∫•t
  const lastUser = await Users.findOne().sort({ userID: -1 }).limit(1);

  // N·∫øu kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o, b·∫Øt ƒë·∫ßu t·ª´ user001
  if (!lastUser) {
    return 'user001';
  }

  // L·∫•y s·ªë ID c·ªßa ng∆∞·ªùi d√πng cu·ªëi c√πng, tƒÉng 1 v√† t·∫°o userID m·ªõi
  const lastUserID = lastUser.userID;
  const lastNumber = parseInt(lastUserID.replace('user', ''), 10);  // T√°ch ph·∫ßn s·ªë t·ª´ userID
  const newNumber = lastNumber + 1;  // TƒÉng s·ªë l√™n 1

  // ƒê·∫£m b·∫£o r·∫±ng userID c√≥ 3 ch·ªØ s·ªë
  return `user${newNumber.toString().padStart(3, '0')}`;
};
// API ƒëƒÉng k√Ω ng∆∞·ªùi d√πng
router.post("/registerUser",async (req, res) => {
  const { sdt, name, ngaySinh, matKhau,email,gioTinh} = req.body;

  if (!sdt || !name || !ngaySinh || !matKhau || !email) {
      return res.status(400).json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin" });
  }

  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i ch∆∞a
  const userExists = await Users.findOne({ sdt });
  if (userExists) {
      return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω" });
  }

  // M√£ h√≥a m·∫≠t kh·∫©u
  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(matKhau, salt);
  
  const userid = await generateUserID(); // T·∫°o userID m·ªõi
  console.log("üìå userID m·ªõi:", userid); // Log userID m·ªõi
  // T·∫°o ng∆∞·ªùi d√πng m·ªõi
  const user = await Users.create({
      name: name,
      userID: userid, 
      email: email, 
      anhDaiDien:"https://res.cloudinary.com/dgqppqcbd/image/upload/v1741595806/anh-dai-‚Ä¶",
      trangThai: "offline",
      ngaysinh: ngaySinh,
      anhBia:"https://res.cloudinary.com/dgqppqcbd/image/upload/v1741595806/anh-dai-‚Ä¶",
      gioTinh: gioTinh,
      sdt: sdt,
      matKhau: hashedPassword, // L∆∞u m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a
  });

  if (user) {
      res.status(201).json({
          message: "ƒêƒÉng k√Ω th√†nh c√¥ng",
          userId: user._id, // Tr·∫£ v·ªÅ ID thay v√¨ hashedPassword
      });
  } else {
      res.status(400).json({ message: "ƒêƒÉng k√Ω th·∫•t b·∫°i" });
  }
});

// API doi mat khau
router.post("/users/doimatkhau", async (req, res) => {
  try {
    const { sdt, matKhau } = req.body;
    const salt = await bcrypt.genSalt(10);
    const mk = await bcrypt.hash(matKhau, salt);
    const updatedUser = await Users.findOneAndUpdate(
      { sdt:sdt },
      { $set: { matKhau:mk}},
      { new: true, runValidators: true }
    );
    
    if (!updatedUser) {
      return res.status(404).json({ success: false, message: "User kh√¥ng t·ªìn t·∫°i" });
    } else {
      return res.status(200).json({ success: true, user: updatedUser });
    }
  } catch (error) {
    console.error("L·ªói:", error.message);
    res.status(500).json({ error: error.message });
  }
});
// API l·∫•y user theo email
router.post("/users/checksdt", async (req, res) => {
  try {
    const {sdt } = req.body;
    
    console.log("Sdt:", sdt); // Log email nh·∫≠n ƒë∆∞·ª£c
    
    const userExists = await Users.exists({sdt:sdt}); // Ki·ªÉm tra s·ª± t·ªìn t·∫°i

    res.json({ exists: !!userExists }); // Tr·∫£ v·ªÅ true n·∫øu t·ªìn t·∫°i, false n·∫øu kh√¥ng
  } catch (error) {
    console.error("L·ªói:", error.message);
    res.status(500).json({ error: error.message });
  }
});


// API l·∫•y user theo email
router.post("/users/email", async (req, res) => {
  try {
    const { email } = req.body;
    console.log("Email:", email); // Log email nh·∫≠n ƒë∆∞·ª£c
    
    const userExists = await Users.exists({ email: email }); // Ki·ªÉm tra s·ª± t·ªìn t·∫°i

    res.json({ exists: !!userExists }); // Tr·∫£ v·ªÅ true n·∫øu t·ªìn t·∫°i, false n·∫øu kh√¥ng
  } catch (error) {
    console.error("L·ªói:", error.message);
    res.status(500).json({ error: error.message });
  }
});

router.post('/send-otp', async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ message: 'Thi·∫øu ƒë·ªãa ch·ªâ email' });
  const otp = Math.floor(100000 + Math.random() * 900000).toString(); // T·∫°o OTP ng·∫´u nhi√™n
  try {
    await Controller.sendOtpEmail(email, otp);
    res.status(200).json({ message: 'G·ª≠i OTP th√†nh c√¥ng', otp });
  } catch (error) {
    res.status(500).json({ message: 'G·ª≠i OTP th·∫•t b·∫°i', error: error.message });
  }
});

// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
router.put("/update-user", async (req, res) => {
  const { userID, name, email, sdt, dob, gender, avatar, anhBia, matKhau } = req.body;

  // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
  if (!userID || !name || !email || !sdt) {
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt!" });
  }

  try {
    // T√¨m ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu
    const user = await Users.findOne({ userID });

    // N·∫øu ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
    }

    // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
    user.name = name || user.name;
    user.email = email || user.email;
    user.sdt = sdt || user.sdt;

    // Chuy·ªÉn ƒë·ªïi ng√†y sinh t·ª´ dd/mm/yyyy th√†nh Date h·ª£p l·ªá
    if (dob) {
      const dateParts = dob.split("/"); // dd/mm/yyyy
      const validDob = new Date(`${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`); // chuy·ªÉn th√†nh yyyy-mm-dd
      if (isNaN(validDob)) {
        return res.status(400).json({ message: "Ng√†y sinh kh√¥ng h·ª£p l·ªá!" });
      }
      user.ngaysinh = validDob;
    }

    // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t gi·ªõi t√≠nh n·∫øu h·ª£p l·ªá
    if (gender && ["Nam", "N·ªØ", "Kh√°c"].includes(gender)) {
      user.gioiTinh = gender || user.gioiTinh;
    } else if (gender) {
      return res.status(400).json({ message: "Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá!" });
    }

    user.anhDaiDien = avatar || user.anhDaiDien;
    user.anhBia = anhBia || user.anhBia;

    // N·∫øu m·∫≠t kh·∫©u m·ªõi ƒë∆∞·ª£c cung c·∫•p, m√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    if (matKhau) {
      const hashedPassword = await bcrypt.hash(matKhau, 10); // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
      user.matKhau = hashedPassword;
    }

    // C·∫≠p nh·∫≠t th·ªùi gian s·ª≠a ƒë·ªïi
    user.ngaySuaDoi = Date.now();

    // L∆∞u l·∫°i ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    await user.save();

    // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng
    res.status(200).json({ message: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!", user });
  } catch (err) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", err.message);
    res.status(500).json({ message: "L·ªói h·ªá th·ªëng", error: err.message });
  }
});

router.post("/upload", upload.array("files"), async (req, res) => {
  try {
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({ error: "No files uploaded" });
    }
    console.log("File:", req.files); // Log file ƒë·ªÉ ki·ªÉm tra
    
    
    const urls = await Promise.all(
      req.files.map(async (file) => await uploadToCloudinary(file))
    );

    res.json({ urls: await Promise.all(urls) }); // Tr·∫£ v·ªÅ c√°c URL ƒë√£ upload
    
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Upload failed" });
  }
});
module.exports = router;
