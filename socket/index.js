const messages = require("../models/Messages");
const ChatMembers = require("../models/ChatMember");
const Controller = require("../controller/index");
const Contacts = require("../models/Contacts");
const Users = require("../models/User");

const socketHandler = (io) => {
  const users = {}; // L∆∞u tr·ªØ c√°c ng∆∞·ªùi d√πng v√† s·ªë ƒëi·ªán tho·∫°i c·ªßa h·ªç

  io.on("connection", (socket) => {
    console.log("üü¢ Client connected:", socket.id);

    // ƒêƒÉng k√Ω s·ªë ƒëi·ªán tho·∫°i c·ªßa ng∆∞·ªùi d√πng khi h·ªç k·∫øt n·ªëi
    socket.on("registerPhoneNumber", (phoneNumber) => {
      users[phoneNumber] = socket.id; // L∆∞u socket id v·ªõi s·ªë ƒëi·ªán tho·∫°i
      console.log(`User with phone number ${phoneNumber} connected`);
    });

    // Tham gia ph√≤ng ng∆∞·ªùi d√πng c√° nh√¢n
    socket.on("join_user", (userID) => {
      socket.join(userID);
      console.log(`üßç‚Äç‚ôÇÔ∏è Socket ${socket.id} joined user room: ${userID}`);
    });

    // Tham gia ph√≤ng chat c·ª• th·ªÉ
    socket.on("join_chat", (chatID) => {
      socket.join(chatID);
      console.log(`üîÅ Socket ${socket.id} joined chat room: ${chatID}`);
    });
    // Tham gia ph√≤ng chat 1-1
    socket.on('createChat1-1', async (data) => {
      try {
        if (!data?.chatID) {
          console.error("‚ùå Kh√¥ng c√≥ chatID trong data");
          return;
        }
    
        const chatmembers = await ChatMembers.find({ chatID: data.chatID });
    
        if (!chatmembers.length) {
          console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√†nh vi√™n trong chat:", data.chatID);
          return;
        }
    
        chatmembers.forEach((member) => {
          io.to(member.userID).emit("newChat1-1", { data });
          console.log(`üì§ G·ª≠i newChat1-1 ƒë·∫øn user ${member.userID}`);
        });
      } catch (error) {
        console.error("‚ùå Error creating chat:", error);
      }
    });
    

    // G·ª≠i tin nh·∫Øn m·ªõi
    socket.on("send_message", async (data) => {
      try {
        const lastMessage = await messages.findOne().sort({ messageID: -1 });
        const nextID = lastMessage
          ? parseInt(lastMessage.messageID.replace("msg", "")) + 1
          : 1;
        const messageID = `msg${String(nextID).padStart(3, "0")}`;

        const newMsg = new messages({
          messageID,
          chatID: data.chatID,
          senderID: data.senderID,
          content: data.content || "",
          type: data.type || "text",
          timestamp: data.timestamp || Date.now(),
          media_url: data.media_url || [],
          status: "sent",
        });

        const saved = await newMsg.save();

        const chatMembers = await ChatMembers.find({ chatID: data.chatID });
        const receiverIDs = chatMembers
          .map((m) => m.userID)
          .filter((id) => id !== data.senderID);

        const fullMessage = {
          ...data,
          messageID: saved.messageID,
          timestamp: saved.timestamp,
          status: "sent",
          senderInfo: {
            name: data.senderName || "Ng∆∞·ªùi d√πng",
            avatar: data.senderAvatar || null,
          },
        };

        receiverIDs.forEach((userID) => {
          io.to(userID).emit("new_message", fullMessage);
        });

        io.to(data.senderID).emit("new_message", fullMessage);
        io.to(data.chatID).emit(data.chatID, fullMessage);

        setTimeout(() => {
          messages.findOneAndUpdate(
            { messageID: saved.messageID },
            { status: "delivered" }
          ).exec();

          io.to(data.chatID).emit(`status_update_${data.chatID}`, {
            messageID: saved.messageID,
            status: "delivered",
          });
        }, 1000);
      } catch (error) {
        console.error("‚ùå Error sending message:", error);
      }
    });

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ ƒë·ªçc
    socket.on("read_messages", async ({ chatID, userID }) => {
      try {
        await messages.updateMany(
          { chatID, status: { $ne: "read" } },
          { status: "read" }
        );

        io.to(chatID).emit(`status_update_${chatID}`, {
          userID,
          status: "read",
        });

        io.to(userID).emit("status_update_all", {
          chatID,
          userID,
          status: "read",
        });
      } catch (err) {
        console.error("‚ùå Error updating read status:", err);
      }
    });
    socket.on("getContacts", async (userID) => {
      try {
        const contacts = await Controller.getContacts(userID);
        socket.emit("contacts", contacts);
      } catch (error) {
        console.error("‚ùå Error getting contacts:", error);
        socket.emit("error", { message: "L·ªói khi l·∫•y danh s√°ch li√™n h·ªá" });
      }
    });
        
    // L·∫•y danh s√°ch chat c·ªßa user
    socket.on("getChat", async (userID) => {
      try {
        const chats = await Controller.getChatsForUser(userID);
        socket.emit("ChatByUserID", chats);
      } catch (error) {
        console.error("‚ùå Error getting chat list:", error);
        socket.emit("error", { message: "L·ªói khi l·∫•y danh s√°ch chat" });
      }
    });

    // ‚úÖ Thu h·ªìi tin nh·∫Øn
    socket.on("unsend_message", async ({ messageID, chatID, senderID }) => {
      try {
        const message = await messages.findOne({ messageID });

        if (!message || message.senderID !== senderID) {
          console.warn("‚ö†Ô∏è Unauthorized unsend or not found");
          return;
        }

        message.isUnsent = true;
        message.content = "";
        message.media_url = [];
        await message.save();

        const unsentData = {
          messageID,
          chatID,
          senderID,
          isUnsent: true,
          timestamp: Date.now(),
        };

        io.to(chatID).emit("unsend_notification", unsentData);

        const members = await ChatMembers.find({ chatID });
        members.forEach((m) => {
          io.to(m.userID).emit("unsend_notification", unsentData);
        });

        console.log("‚ùå Message unsent:", messageID);
      } catch (error) {
        console.error("‚ùå Error unsending message:", error);
      }
    });
// L·∫Øng nghe s·ª± ki·ªán g·ª≠i y√™u c·∫ßu k·∫øt b·∫°n
    socket.on("send_friend_request", async (data) => {
      try {
        const { senderID, senderPhone, recipientPhone, senderName, senderImage } = data;
    
        if (!senderID || !senderPhone || !recipientPhone) {
          socket.emit("error", { message: "Thi·∫øu th√¥ng tin ng∆∞·ªùi g·ª≠i ho·∫∑c ng∆∞·ªùi nh·∫≠n" });
          return;
        }
    
        const recipientUser = await Users.findOne({ sdt: recipientPhone });
        if (!recipientUser) {
          socket.emit("error", { message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi nh·∫≠n" });
          return;
        }
    
        // Ki·ªÉm tra ƒë√£ g·ª≠i l·ªùi m·ªùi ch∆∞a
        const existingRequest = await Contacts.findOne({
          userID: senderID,
          contactID: recipientUser.userID,
          status: "pending",
        });
    
        if (existingRequest) {
          socket.emit("error", { message: "ƒê√£ g·ª≠i l·ªùi m·ªùi tr∆∞·ªõc ƒë√≥" });
          return;
        }
    
        // L∆∞u v√†o database
        const newFriendRequest = new Contacts({
          userID: senderID,
          contactID: recipientUser.userID,
          alias: "Default Alias",
          status: "pending",
        });
    
        await newFriendRequest.save();
    
        // G·ª≠i y√™u c·∫ßu k·∫øt b·∫°n qua socket t·ªõi ng∆∞·ªùi nh·∫≠n v√† ng∆∞·ªùi g·ª≠i
        const friendRequestData = {
          senderID,
          senderPhone,
          recipientPhone,
          senderName,
          senderImage,
          status: "pending",
          timestamp: Date.now(),
        };
    
        // Ph√°t s·ª± ki·ªán cho ng∆∞·ªùi nh·∫≠n y√™u c·∫ßu k·∫øt b·∫°n ngay l·∫≠p t·ª©c
        const recipientSocketId = users[recipientPhone];
    
        if (recipientSocketId) {
          io.to(recipientSocketId).emit("new_friend_request", friendRequestData); // Ph√°t s·ª± ki·ªán g·ª≠i y√™u c·∫ßu
        }
    
        // Ph√°t s·ª± ki·ªán cho ng∆∞·ªùi g·ª≠i y√™u c·∫ßu k·∫øt b·∫°n (ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i ƒë√£ g·ª≠i y√™u c·∫ßu)
        const senderSocketId = users[senderPhone];
        if (senderSocketId) {
          io.to(senderSocketId).emit("friend_request_sent", friendRequestData);
        }
    
        console.log("üì© Friend request sent:", friendRequestData);
      } catch (error) {
        console.error("‚ùå Error sending friend request:", error);
        socket.emit("error", { message: "L·ªói server" });
      }
    });
  // L·∫Øng nghe s·ª± ki·ªán accept_friend_request
    socket.on("accept_friend_request", async ({ senderID, recipientID }) => {
      try {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u c·∫ßu k·∫øt b·∫°n trong database
        const updatedRequest = await Contacts.findOneAndUpdate(
          { userID: senderID, contactID: recipientID, status: "pending" },
          { status: "accepted" },
          { new: true }
        );
    
        if (updatedRequest) {
          // Ph√°t s·ª± ki·ªán cho c·∫£ ng∆∞·ªùi g·ª≠i v√† ng∆∞·ªùi nh·∫≠n
          io.to(users[senderID]).emit("friend_request_accepted", { senderID, recipientID });
          io.to(users[recipientID]).emit("friend_request_accepted", { senderID, recipientID });
          }
        } catch (error) {
          console.error("‚ùå Error accepting friend request:", error);
        }
      });
      
      socket.on("reject_friend_request", async ({ senderID, recipientID }) => {
        try {
          // X√≥a y√™u c·∫ßu k·∫øt b·∫°n trong database
          const deletedRequest = await Contacts.findOneAndDelete({
            userID: senderID,
            contactID: recipientID,
            status: "pending",
          });
      
          if (deletedRequest) {
            // Ph√°t s·ª± ki·ªán t·ª´ ch·ªëi y√™u c·∫ßu cho c·∫£ ng∆∞·ªùi g·ª≠i v√† ng∆∞·ªùi nh·∫≠n
            io.to(users[senderID]).emit("friend_request_rejected", { senderID, recipientID });
            io.to(users[recipientID]).emit("friend_request_rejected", { senderID, recipientID });
          }
        } catch (error) {
          console.error("‚ùå Error rejecting friend request:", error);
        }
      });
  
      // L·∫Øng nghe s·ª± ki·ªán get_pending_friend_requests
      socket.on("get_pending_friend_requests", async (userID) => {
        try {
          // G·ªçi controller ƒë·ªÉ l·∫•y danh s√°ch y√™u c·∫ßu k·∫øt b·∫°n ƒëang ch·ªù
          const friendRequests = await contactController.displayFriendRequest(userID);
          socket.emit("pending_friend_requests", friendRequests); // G·ª≠i l·∫°i th√¥ng tin y√™u c·∫ßu k·∫øt b·∫°n ƒëang ch·ªù
        } catch (error) { 
          console.error("‚ùå Error fetching pending friend requests:", error);
          socket.emit("error", { message: "L·ªói khi l·∫•y y√™u c·∫ßu k·∫øt b·∫°n" });
        }
      });

    // Ng·∫Øt k·∫øt n·ªëi
    socket.on("disconnect", () => {
      console.log("üî¥ Client disconnected:", socket.id);
    });
  });
};

module.exports = socketHandler;
